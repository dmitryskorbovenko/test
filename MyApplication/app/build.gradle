apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.example.dmitryskorbovenko.myapplication"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName inferVersion()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}

task printVersion {
    doLast {
        println inferVersion()
    }
}

task rc {
    doLast {
        if (!isMasterBranch()) {
            throw new GradleException('you MUST create RC from master branch')
        }

        if (isWcDirty()) {
            throw new GradleException('you have local changes')
        }

        if (isRcBranchExist()) {
            throw new GradleException("$RED you already have local RC branch $NC")
        }

        if (!project.hasProperty('rc.version')) {
            throw new GradleException("run with -Prc.version=1.0.0")
        }

        def version = project.property('rc.version')
        if (!(version ==~ /\d+\.\d+\.\d+/)) {
            throw new GradleException(name + ': rc.version parameter should comply regex /\\d+.\\d+.\\d+/ ')
        }

        if (!project.hasProperty('rc.issue')) {
            throw new GradleException("run with -Prc.issue=TP-1234")
        }

        def issue = project.property('rc.issue')
        def rcBranchName = "RC-$issue"

        runTransaction({
            execOrThrow("git tag v$version-RC")
            execOrThrow("git checkout -b $rcBranchName")
            execOrThrow("git push origin $rcBranchName -u")
        }, {
            exec("git checkout master")
            exec("git tag -d v$version-RC")
            exec("git branch -d $rcBranchName")
            exec("git push origin --delete $rcBranchName")
        })
    }
}

task release {
    doLast {
        if (!isRcBranch()) {
            throw new GradleException('you MUST release from RC branch')
        }

        if (isWcDirty()) {
            throw new GradleException('you have local changes')
        }

        def currentBranchName = getCurrentBranchName()
        def releaseVersion = getLatestTag().find(/\d+\.\d+\.\d+/)

        runTransaction({
            execOrThrow("git tag v$releaseVersion")
            execOrThrow("git push origin --tags")

            exec("git checkout master")
            def mergeResult = exec("git merge --no-commit  --no-ff $currentBranchName")
            exec("git merge --abort")

            if (mergeResult != 0) {
                println "Please merge $currentBranchName to master manualy"
            } else {
                exec("git merge $currentBranchName")
                exec("git push origin")
            }

        }, {
            exec("git tag -d v$releaseVersion")
        })
    }
}

private static String inferVersion() {

    def latestTag = getLatestTag()

    def latestTagHash = execOrThrow("git rev-list -n 1 $latestTag")

    def isLatestTagRelease = latestTag ==~ /v\d+\.\d+\.\d+/

    def currentHash = execOrThrow("git rev-parse HEAD")

    def isOnReleaseCommit = isLatestTagRelease && latestTagHash == currentHash

    def isRcBranch = isRcBranch()

    def version = latestTag.substring(1)
    if (!isRcBranch) {
        version = version.replaceAll(/(\d+)\.(\d+)\.(\d+)(.*)/, { all, major, minor, patch, suffix ->
            "$major.${!isOnReleaseCommit ? Integer.parseInt(minor) + 1 : minor}.$patch"
        })
    }

    if (!isOnReleaseCommit) {
        version += "-SNAPSHOT"
    }

    return version
}

private static String getLatestTag() {
    execOrThrow("git describe --abbrev=0 --tags --match v* --first-parent")
}

private static Boolean isRcBranch() {
    return getCurrentBranchName().contains("RC")
}

private static Boolean isRcBranchExist() {
    return "git rev-parse --verify RC".execute().waitFor() == 0
}

private static Boolean isMasterBranch() {
    return getCurrentBranchName() == "master"
}

private static String getCurrentBranchName() {
    return execOrThrow("git rev-parse --abbrev-ref HEAD")
}

private static boolean isWcDirty() {
    return "git diff-index --quiet HEAD --".execute().waitFor() != 0
}

private static String execOrThrow(String cmd) {
    println "execOrThrow $cmd"
    def process = new ProcessBuilder(['sh', '-c', cmd]).redirectErrorStream(true).start()
    def output = process.text
    if (process.waitFor() != 0) {
        throw new GradleException(output)
    }

    return output.trim()
}

private static int exec(String cmd) {
    println "exec $cmd"
    return cmd.execute().waitFor()
}

private static String runTransaction(Closure cmds, Closure revertCmds) {
    try {
        cmds.call()
    } catch (Exception ex) {
        revertCmds.call()
        throw ex
    }
}

def GREEN='\033[0;32m'
def YELLOW='\033[1;33m'
def RED='\033[0;31m'
def ORANGE='\033[0;33m'
def NC='\033[0m'